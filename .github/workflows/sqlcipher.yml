name: Build SQLCipher against Python libraries
on: [push]

jobs:
  sqlcipher:
    name: Build SQLCipher
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4

      - id: cache-downloads-restore
        uses: actions/cache/restore@v4
        with:
          path: dl
          key: download-sqlcipher-6

      - name: download
        shell: pwsh
        run: |
          . ./main.ps1
          Get-SecureDownload "dl/openssl.tar.gz" "openssl-3.4.1.tar.gz"
          Get-SecureDownload "dl/sqlcipher.zip"  "sqlcipher-4.9.0.zip"
          Get-SecureDownload "dl/tcl.tar.gz"     "tcl-9.0.1.tar.gz"

      - uses: actions/cache/save@v4
        with:
          path: dl
          key: ${{ steps.cache-downloads-restore.outputs.cache-primary-key }}

      - name: Build fake deps
        shell: pwsh
        run: |
          . ./main.ps1
          Prepare-FakeCompileOpenSSL

      - name: Build SQLCipher
        shell: pwsh
        run: |
          . ./main.ps1

          Enter-CompilerEnvironment
          & unzip -d sqlcipher.tmp dl/sqlcipher.zip
          Move-Item sqlcipher.tmp/* sqlcipher

          cd sqlcipher
          $opts = (Prepare-CompileSQLCipher "..")
          & nmake /f makefile.msc sqlite3.c         NO_TCL=1 @opts
          & nmake /f makefile.msc sqlite3.dll       NO_TCL=1 @opts
          & nmake /f makefile.msc sqlite3.exe       NO_TCL=1 @opts
          # & nmake /f makefile.msc sqldiff.exe       NO_TCL=1 @opts
          # & nmake /f makefile.msc sqlite3_rsync.exe NO_TCL=1 @opts

      - name: Assemble outputs
        shell: pwsh
        run: |
          . ./main.ps1

          Invoke-MkdirP "sqlcipher-final"

          $patterns = New-Object System.Collections.ArrayList
          foreach ($x in @("*")) {
            foreach ($y in @(".dll", ".exp", ".lib", ".pdb", ".exe")) {
              $patterns.Add("$x$y")
            }
          }
          $patterns = [string[]]$patterns
          $patterns | Write-Output
          Get-ChildItem -LiteralPath "sqlcipher" -Recurse -Include $patterns `
            | ForEach-Object { Copy-Item -LiteralPath $_.FullName -Destination "sqlcipher-final" }

      - name: Upload SQLCipher build
        uses: actions/upload-artifact@v4
        with:
          name: sqlcipher
          path: sqlcipher-final

      - name: Build TCL
        shell: pwsh
        run: |
          . ./main.ps1

          Enter-CompilerEnvironment

          Invoke-MkdirP tcl
          $tcl = Resolve-LiteralPathForced "tcl"
          & tar -C tcl --strip-components=1 -xf dl/tcl.tar.gz

          cd tcl/win
          & nmake -f makefile.vc release "INSTALLDIR=$tcl"
          & nmake -f makefile.vc install "INSTALLDIR=$tcl"

          # Get-ChildItem -LiteralPath $tcl -Recurse

      - name: Run SQLCipher tests
        shell: pwsh
        run: |
          . ./main.ps1

          $tcl = Resolve-LiteralPathForced "tcl"

          Enter-CompilerEnvironment

          cd sqlcipher
          $opts = (Prepare-CompileSQLCipher "..")
          # & nmake /f makefile.msc tclextension-install TCLDIR=$tcl @opts

          try {
            & nmake /f makefile.msc testfixture.exe      TCLDIR=$tcl @opts
          } catch {
            "oh well"
          }

          Get-ChildItem -LiteralPath "." -Recurse -Include @(".exe", ".dll")

          & ./testfixture.exe test/sqlcipher.test
