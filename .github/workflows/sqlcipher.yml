name: Build SQLCipher against Python libraries
on: [push]

jobs:
  sqlcipher:
    name: Build SQLCipher
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4

      - id: cache-downloads-restore
        uses: actions/cache/restore@v4
        with:
          path: dl
          key: download-sqlcipher-5

      - name: download
        shell: pwsh
        run: |
          . ./main.ps1
          Get-SecureDownload "dl/openssl.tar.gz" "openssl-3.4.1.tar.gz"
          Get-SecureDownload "dl/sqlcipher.zip"  "sqlcipher-4.9.0.zip"

      - uses: actions/cache/save@v4
        with:
          path: dl
          key: ${{ steps.cache-downloads-restore.outputs.cache-primary-key }}

      - name: Build fake deps
        shell: pwsh
        run: |
          . ./main.ps1
          Prepare-FakeCompileOpenSSL

      - name: Build SQLCipher
        shell: pwsh
        run: |
          . ./main.ps1

          $parent = Resolve-LiteralPathForced "."

          Enter-CompilerEnvironment
          & unzip -d sqlcipher.tmp dl/sqlcipher.zip
          Move-Item sqlcipher.tmp/* sqlcipher

          cd sqlcipher

          $vopts = @(
            "-DSQLITE_TEMP_STORE=2",
            "-DSQLITE_HAS_CODEC=1",
            "-DSQLITE_EXTRA_INIT=sqlcipher_extra_init",
            "-DSQLITE_EXTRA_SHUTDOWN=sqlcipher_extra_shutdown",

            "-DSQLITE_ENABLE_COLUMN_METADATA=1",
            "-DSQLITE_ENABLE_DBSTAT_VTAB=1",
            "-DSQLITE_ENABLE_FTS3=1",
            "-DSQLITE_ENABLE_FTS3_PARENTHESIS=1",
            "-DSQLITE_ENABLE_FTS3_TOKENIZER=1",
            "-DSQLITE_ENABLE_FTS4=1",
            "-DSQLITE_ENABLE_FTS5=1",
            "-DSQLITE_ENABLE_JSON1=1",
            "-DSQLITE_ENABLE_LOAD_EXTENSION=1",
            "-DSQLITE_ENABLE_PREUPDATE_HOOK=1",
            "-DSQLITE_ENABLE_RTREE=1",
            "-DSQLITE_ENABLE_SESSION=1",
            "-DSQLITE_ENABLE_STAT4=1",
            "-DSQLITE_ENABLE_STMTVTAB=1",
            "-DSQLITE_ENABLE_UNLOCK_NOTIFY=1",
            "-DSQLITE_ENABLE_UPDATE_DELETE_LIMIT=1",
            "-DSQLITE_HAVE_ISNAN=1",
            "-DSQLITE_LIKE_DOESNT_MATCH_BLOBS=1",
            "-DSQLITE_MAX_SCHEMA_RETRY=50",
            "-DSQLITE_MAX_VARIABLE_NUMBER=250000",
            "-DSQLITE_OMIT_LOOKASIDE=1",
            "-DSQLITE_SECURE_DELETE=1",
            "-DSQLITE_SOUNDEX=1",
            "-DSQLITE_THREADSAFE=1",
            "-DSQLITE_USE_URI=1",

            "-DHAVE_STDINT_H=1",

            "-I`"$parent\openssl\include`""
          )

          $opts = @(
            "NO_TCL=1", "USE_CRT_DLL=1", "WIN32HEAP=1",
            "LTLIBPATHS=`"/LIBPATH:$parent\openssl`"",
            "LTLIBS=libcrypto.lib libssl.lib"
          )

          $Env:CC = "cl.exe"
          $Env:CXX = "cl.exe"
          $Env:OPTS = $vopts -join " "

          & nmake /f makefile.msc sqlite3.c @opts
          & nmake /f makefile.msc sqlite3.dll @opts
          & nmake /f makefile.msc sqlite3.exe @opts
          # & nmake /f makefile.msc test @opts

      - name: Assemble outputs
        shell: pwsh
        run: |
          . ./main.ps1

          Invoke-MkdirP "sqlcipher-final"

          $patterns = New-Object System.Collections.ArrayList
          foreach ($x in @("*")) {
            foreach ($y in @(".dll", ".exp", ".lib", ".pdb", ".exe")) {
              $patterns.Add("$x$y")
            }
          }
          $patterns = [string[]]$patterns
          $patterns | Write-Output
          Get-ChildItem -LiteralPath "sqlcipher" -Recurse -Include $patterns `
            | ForEach-Object { Copy-Item -LiteralPath $_.FullName -Destination "sqlcipher-final" }

      - name: Upload SQLCipher build
        uses: actions/upload-artifact@v4
        with:
          name: sqlcipher
          path: sqlcipher-final
